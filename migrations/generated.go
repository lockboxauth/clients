// Code generated by go-bindata.
// sources:
// sql/20181208_1_init.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql20181208_1_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x4d\x4b\xf3\x40\x14\x85\xd7\x99\x5f\x71\x77\x6d\x78\xdb\xc5\xab\x52\x84\xac\xa6\xcd\x88\xc5\xc9\x07\xe3\x44\xac\x9b\x61\x9a\xdc\xca\x85\x98\x96\x99\x29\xe2\xbf\x97\xba\x08\x89\x56\x74\xe7\x76\x78\x98\x73\xcf\xc3\x99\xcf\xe1\xdf\x0b\x3d\x3b\x1b\x10\xaa\x03\x5b\x29\xc1\xb5\x00\xcd\x97\x52\x40\xdd\x12\x76\xc1\xc3\x94\x45\xd4\xc0\x03\x57\xab\x5b\xae\xa6\x97\x8b\x18\x4a\xb5\xce\xb8\xda\xc0\x9d\xd8\xcc\x58\xe4\xb1\x76\x18\x7a\xe0\xff\xc5\x75\x0c\x79\xa1\x21\xaf\xa4\x84\x54\xdc\xf0\x4a\x6a\x98\x4c\x66\x2c\xaa\xf7\xdd\x8e\x1a\xec\x02\xd9\x16\x96\x45\x21\x05\xcf\xbf\xa2\x3b\xdb\x7a\x3c\xd1\x0e\x6d\xc0\xc6\xd8\x00\x7a\x9d\x89\x7b\xcd\xb3\x52\x3f\xf5\xfc\x80\xd8\xbe\xf5\xe9\x8b\xab\x6f\xc3\x7b\xd8\xd0\x61\x54\xe7\x0c\xcf\xe2\x84\x8d\x6d\x38\x6c\xc8\x61\x1d\xcc\xd1\xd1\xcf\x4e\x8e\x8e\x40\x8b\x47\x3d\xbc\x96\xbc\xd9\x5a\x8f\xa7\x0f\x7e\x51\xfe\x43\xbe\xf9\x14\x72\xa6\xfb\x9f\xd9\x19\x4e\x27\xdd\xbf\x76\x2c\x55\x45\x39\x9e\x4e\x32\x7c\x1b\x09\x4c\xd8\x7b\x00\x00\x00\xff\xff\x38\x04\xc6\x28\x7a\x02\x00\x00")

func sql20181208_1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20181208_1_initSql,
		"sql/20181208_1_init.sql",
	)
}

func sql20181208_1_initSql() (*asset, error) {
	bytes, err := sql20181208_1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20181208_1_init.sql", size: 634, mode: os.FileMode(436), modTime: time.Unix(1544338298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/20181208_1_init.sql": sql20181208_1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"20181208_1_init.sql": &bintree{sql20181208_1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

